name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - development
        - staging
        - production

env:
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "18"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Code Quality & Security Checks
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality & Security

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt[dev]

      - name: Run Black (Code Formatting)
        run: |
          black --check --diff .
        continue-on-error: true

      - name: Run isort (Import Sorting)
        run: |
          isort --check-only --diff .
        continue-on-error: true

      - name: Run Flake8 (Linting)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run Bandit (Security)
        run: |
          bandit -r . -x ./venv,./env,./tests,./migrations
        continue-on-error: true

      - name: Run Safety (Dependency Security)
        run: |
          safety check
        continue-on-error: true

      - name: Run MyPy (Type Checking)
        run: |
          mypy . --ignore-missing-imports
        continue-on-error: true

  # Job 2: Test Suite
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    needs: code-quality

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_movie_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt[dev]

      - name: Set up environment variables
        run: |
          echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
          echo "DEBUG=True" >> $GITHUB_ENV
          echo "DB_NAME=test_movie_db" >> $GITHUB_ENV
          echo "DB_USER=postgres" >> $GITHUB_ENV
          echo "DB_PASSWORD=postgres" >> $GITHUB_ENV
          echo "DB_HOST=localhost" >> $GITHUB_ENV
          echo "DB_PORT=5432" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
          echo "TMDB_API_KEY=test-api-key" >> $GITHUB_ENV

      - name: Run database migrations
        run: |
          if [ -f manage.py ]; then
            python manage.py makemigrations --check --dry-run
            python manage.py migrate
          fi

      - name: Run tests with coverage
        run: |
          if [ -f manage.py ]; then
            coverage run --source='.' manage.py test
            coverage report --show-missing
            coverage xml
          else
            echo "Django project not yet created"
          fi

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Job 3: Build Docker Image
  build:
    runs-on: ubuntu-latest
    name: Build & Test Docker Image
    needs: [code-quality, test]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=main-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 4: Security Scanning
  security:
    runs-on: ubuntu-latest
    name: Security Scanning
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "ghcr.io/${{ github.repository }}:latest"
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"
          exit-code: "1"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # Job 5: Determine Deployment Environment
  determine-environment:
    runs-on: ubuntu-latest
    name: Determine Deployment Environment
    needs: [build, security]
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      compose-file: ${{ steps.env.outputs.compose-file }}
      url: ${{ steps.env.outputs.url }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENVIRONMENT="production"
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            ENVIRONMENT="staging"
          else
            ENVIRONMENT="development"
          fi
          
          echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT
          
          case $ENVIRONMENT in
            "production")
              echo "compose-file=docker-compose.vps.yml" >> $GITHUB_OUTPUT
              echo "url=https://nexus.k1nyanjui.com" >> $GITHUB_OUTPUT
              ;;
            "staging")
              echo "compose-file=docker-compose.staging.yml" >> $GITHUB_OUTPUT
              echo "url=https://staging-nexus.k1nyanjui.com" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "compose-file=docker-compose.yml" >> $GITHUB_OUTPUT
              echo "url=http://localhost:8000" >> $GITHUB_OUTPUT
              ;;
          esac

  # Job 6: Deploy to Environment
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to ${{ needs.determine-environment.outputs.environment }}
    needs: [determine-environment]
    environment: ${{ needs.determine-environment.outputs.environment }}
    if: needs.determine-environment.outputs.environment != 'development'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          echo "ENVIRONMENT=${{ needs.determine-environment.outputs.environment }}" >> $GITHUB_ENV
          echo "COMPOSE_FILE=${{ needs.determine-environment.outputs.compose-file }}" >> $GITHUB_ENV
          echo "DEPLOY_URL=${{ needs.determine-environment.outputs.url }}" >> $GITHUB_ENV

      - name: Update Docker Compose image reference
        run: |
          BRANCH_NAME=$(echo ${{ github.ref_name }} | sed 's/[^a-zA-Z0-9]/-/g')
          IMAGE_TAG="${BRANCH_NAME}-${{ github.sha }}"
          
          # Update the compose file with new image tag
          if ! sed -i "s|image: ghcr.io/${{ github.repository }}:.*|image: ghcr.io/${{ github.repository }}:${IMAGE_TAG}|g" ${{ env.COMPOSE_FILE }}; then
            echo "Error: Failed to update Docker Compose image"
            exit 1
          fi
          echo "Updated ${{ env.COMPOSE_FILE }} to use image: ghcr.io/${{ github.repository }}:${IMAGE_TAG}"

      - name: Commit and push changes
        run: |
          git config --local user.email "${{ github.actor }}@users.noreply.github.com"
          git config --local user.name "${{ github.actor }}"
          if git diff --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          git add ${{ env.COMPOSE_FILE }}
          if ! git commit -m "chore: update ${{ env.ENVIRONMENT }} deployment to ${{ github.sha }}"; then
            echo "Error: Failed to commit changes"
            exit 1
          fi
          if ! git push; then
            echo "Error: Failed to push changes"
            exit 1
          fi

      - name: Deploy to VPS
        if: env.ENVIRONMENT == 'production'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 161.97.116.5
          username: deploy
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /home/deploy/projects/nexus
            git pull origin main
            ./scripts/deploy-vps.sh

      - name: Deploy notification
        run: |
          echo "🚀 Deployment ready for ${{ env.ENVIRONMENT }}"
          echo "📁 Compose file: ${{ env.COMPOSE_FILE }}"
          echo "🌐 URL: ${{ env.DEPLOY_URL }}"
          if [[ "${{ env.ENVIRONMENT }}" != "production" ]]; then
            echo "To deploy on VPS, pull latest changes and restart:"
            echo "git pull origin ${{ github.ref_name }} && docker-compose -f ${{ env.COMPOSE_FILE }} up -d"
          fi  # Job 7: Post-deployment tests
  post-deploy-tests:
    runs-on: ubuntu-latest
    name: Post-deployment Tests
    needs: [deploy, determine-environment]
    if: needs.deploy.result == 'success' && needs.determine-environment.outputs.environment != 'development'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install test dependencies
        run: |
          pip install requests

      - name: Run health check
        run: |
          HEALTH_URL="${{ needs.determine-environment.outputs.url }}/api/health/"
          echo "Running health check for: $HEALTH_URL"
          python scripts/health_check.py "$HEALTH_URL"

  # Job 8: Deployment Summary
  summary:
    runs-on: ubuntu-latest
    name: Deployment Summary
    needs: [deploy, post-deploy-tests, determine-environment]
    if: always()

    steps:
      - name: Create deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.determine-environment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Status:** ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Health Check:** ${{ needs.post-deploy-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment URL:** ${{ needs.determine-environment.outputs.url }}" >> $GITHUB_STEP_SUMMARY
