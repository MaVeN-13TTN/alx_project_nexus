# Generated by Django 4.2.23 on 2025-08-09 23:27

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='RecommendationSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prefer_content_based', models.BooleanField(default=True)),
                ('prefer_collaborative', models.BooleanField(default=True)),
                ('prefer_trending', models.BooleanField(default=False)),
                ('genre_diversity', models.FloatField(default=0.5, help_text='0.0 = Similar genres, 1.0 = Diverse genres', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('release_year_range', models.IntegerField(default=10, help_text='Include movies from last N years', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50)])),
                ('min_vote_average', models.FloatField(default=6.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)])),
                ('min_vote_count', models.IntegerField(default=100, validators=[django.core.validators.MinValueValidator(0)])),
                ('max_recommendations', models.IntegerField(default=20, validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(100)])),
                ('cache_duration_hours', models.IntegerField(default=2, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(24)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='recommendation_settings', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MovieSimilarity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('movie1_id', models.IntegerField(help_text='TMDb movie ID')),
                ('movie2_id', models.IntegerField(help_text='TMDb movie ID')),
                ('similarity_score', models.FloatField(help_text='Content similarity score between 0 and 1', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('similarity_type', models.CharField(choices=[('genre', 'Genre Similarity'), ('cast', 'Cast Similarity'), ('director', 'Director Similarity'), ('combined', 'Combined Similarity')], default='combined', max_length=20)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'indexes': [models.Index(fields=['movie1_id', 'similarity_score'], name='recommendat_movie1__32ab4e_idx'), models.Index(fields=['movie2_id', 'similarity_score'], name='recommendat_movie2__a853eb_idx'), models.Index(fields=['similarity_type'], name='recommendat_similar_309669_idx')],
                'unique_together': {('movie1_id', 'movie2_id', 'similarity_type')},
            },
        ),
        migrations.CreateModel(
            name='UserSimilarity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('similarity_score', models.FloatField(help_text='Similarity score between 0 and 1', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('user1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similarity_as_user1', to=settings.AUTH_USER_MODEL)),
                ('user2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similarity_as_user2', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['user1', 'similarity_score'], name='recommendat_user1_i_9add72_idx'), models.Index(fields=['user2', 'similarity_score'], name='recommendat_user2_i_15fcb5_idx')],
                'unique_together': {('user1', 'user2')},
            },
        ),
        migrations.CreateModel(
            name='RecommendationFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('movie_id', models.IntegerField(help_text='TMDb movie ID')),
                ('recommendation_type', models.CharField(choices=[('content', 'Content-Based'), ('collaborative', 'Collaborative Filtering'), ('hybrid', 'Hybrid'), ('trending', 'Trending'), ('similar', 'Similar Movies')], max_length=20)),
                ('feedback', models.CharField(choices=[('like', 'Liked'), ('dislike', 'Disliked'), ('not_interested', 'Not Interested'), ('watched', 'Watched'), ('ignore', 'Ignore')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendation_feedback', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['user', 'feedback'], name='recommendat_user_id_24965e_idx'), models.Index(fields=['movie_id', 'feedback'], name='recommendat_movie_i_baad77_idx'), models.Index(fields=['recommendation_type'], name='recommendat_recomme_9e27ea_idx')],
                'unique_together': {('user', 'movie_id', 'recommendation_type')},
            },
        ),
        migrations.CreateModel(
            name='RecommendationCache',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommendation_type', models.CharField(choices=[('content', 'Content-Based'), ('collaborative', 'Collaborative Filtering'), ('hybrid', 'Hybrid'), ('trending', 'Trending'), ('similar', 'Similar Movies')], max_length=20)),
                ('movie_ids', models.JSONField(help_text='List of recommended movie IDs from TMDb')),
                ('scores', models.JSONField(blank=True, help_text='Recommendation scores for each movie', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(help_text='When this cache entry expires')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendation_caches', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['user', 'recommendation_type'], name='recommendat_user_id_c71f10_idx'), models.Index(fields=['expires_at'], name='recommendat_expires_349597_idx')],
                'unique_together': {('user', 'recommendation_type')},
            },
        ),
    ]
