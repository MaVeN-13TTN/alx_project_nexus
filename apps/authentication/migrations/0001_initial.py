# Generated by Django 4.2.23 on 2025-08-09 21:22

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(help_text="User's email address (used for login and notifications)", max_length=254, unique=True, validators=[django.core.validators.EmailValidator()])),
                ('bio', models.TextField(blank=True, help_text='Short biography or description of the user', max_length=500)),
                ('birth_date', models.DateField(blank=True, help_text="User's birth date (for age-appropriate recommendations)", null=True)),
                ('location', models.CharField(blank=True, help_text="User's location (city, country)", max_length=100)),
                ('avatar', models.URLField(blank=True, help_text="URL to user's profile picture")),
                ('is_public_profile', models.BooleanField(default=True, help_text="Whether the user's profile is public")),
                ('allow_recommendations', models.BooleanField(default=True, help_text='Whether to show personalized recommendations')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Account creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last profile update timestamp')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preferred_language', models.CharField(blank=True, help_text='Preferred language for movies (ISO 639-1 code)', max_length=10)),
                ('min_rating', models.DecimalField(blank=True, decimal_places=1, help_text='Minimum rating for movie recommendations', max_digits=3, null=True)),
                ('email_notifications', models.BooleanField(default=True, help_text='Receive email notifications')),
                ('recommendation_emails', models.BooleanField(default=False, help_text='Receive weekly recommendation emails')),
                ('last_active', models.DateTimeField(auto_now=True, help_text='Last activity timestamp')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='authenticat_email_d74434_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['username'], name='authenticat_usernam_61ef80_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['created_at'], name='authenticat_created_b28532_idx'),
        ),
    ]
