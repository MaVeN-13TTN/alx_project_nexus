# Multi-Environment VPS Deployment Configuration
# This configuration serves both staging and production environments
# from a single application instance using domain-based routing

services:
  # PostgreSQL Database for VPS (Multi-Environment)
  db:
    image: postgres:15
    container_name: nexus_vps_postgres
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME:-movie_recommendation_prod}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    # Use init script to create staging database
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./scripts/init-staging-db.sh:/docker-entrypoint-initdb.d/init-staging-db.sh:ro
    ports:
      - "127.0.0.1:5432:5432" # For local debugging/backups
    restart: unless-stopped
    networks:
      - nexus_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache for VPS
  redis:
    image: redis:7-alpine
    container_name: nexus_vps_redis
    ports:
      - "127.0.0.1:6379:6379" # For local debugging
    restart: unless-stopped
    networks:
      - nexus_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Application for VPS (Multi-Environment)
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nexus_vps_web
    ports:
      - "127.0.0.1:8000:8000" # CRITICAL: Map to host for Nginx proxy
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.multi_environment
      - ENVIRONMENT=multi
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME:-movie_recommendation_prod}
      - REDIS_URL=redis://redis:6379/0
      - TMDB_API_KEY=${TMDB_API_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-nexus.k1nyanjui.com,staging-nexus.k1nyanjui.com,161.97.116.5,localhost}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-https://nexus.k1nyanjui.com,https://staging-nexus.k1nyanjui.com}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS:-https://nexus.k1nyanjui.com,https://staging-nexus.k1nyanjui.com}
      - SECURE_SSL_REDIRECT=${SECURE_SSL_REDIRECT:-False} # Nginx handles SSL
      - SESSION_COOKIE_SECURE=${SESSION_COOKIE_SECURE:-True}
      - CSRF_COOKIE_SECURE=${CSRF_COOKIE_SECURE:-True}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nexus_network
    volumes:
      - app_logs:/app/logs # Persistent logging with proper permissions
      - ./static:/app/static # Static files
      - ./media:/app/media # Media files
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: |
      sh -c "
        echo 'Creating logs directory...'
        mkdir -p /app/logs
        chmod 755 /app/logs
        echo 'Waiting for database...'
        while ! nc -z db 5432; do sleep 1; done
        echo 'Database is ready!'
        echo 'Running production migrations...'
        python manage.py migrate --noinput
        echo 'Running staging migrations...'
        HTTP_HOST=staging-nexus.k1nyanjui.com python manage.py migrate --noinput
        echo 'Collecting static files...'
        python manage.py collectstatic --noinput
        echo 'Creating superuser if needed...'
        python manage.py shell -c \"
        from django.contrib.auth import get_user_model;
        User = get_user_model();
        User.objects.filter(username='admin').exists() or 
        User.objects.create_superuser('admin', 'admin@nexus.com', 'admin123')
        \" || true
        echo 'Starting Gunicorn server...'
        exec gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 4 --worker-class sync --timeout 120 --max-requests 1000 --max-requests-jitter 100 --log-level info --access-logfile - --error-logfile -
      "
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  app_logs:
    driver: local

networks:
  nexus_network:
    driver: bridge
